#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RawImport_Lightspeed
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DMSIntegration")]
	public partial class IntegrationTablesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompanyIntegration(CompanyIntegration instance);
    partial void UpdateCompanyIntegration(CompanyIntegration instance);
    partial void DeleteCompanyIntegration(CompanyIntegration instance);
    partial void InsertDMSImport(DMSImport instance);
    partial void UpdateDMSImport(DMSImport instance);
    partial void DeleteDMSImport(DMSImport instance);
    partial void InsertDMSImportType(DMSImportType instance);
    partial void UpdateDMSImportType(DMSImportType instance);
    partial void DeleteDMSImportType(DMSImportType instance);
    partial void InsertMasterDMSImport(MasterDMSImport instance);
    partial void UpdateMasterDMSImport(MasterDMSImport instance);
    partial void DeleteMasterDMSImport(MasterDMSImport instance);
    partial void InsertMessageLog(MessageLog instance);
    partial void UpdateMessageLog(MessageLog instance);
    partial void DeleteMessageLog(MessageLog instance);
    #endregion
		
		public IntegrationTablesDataContext() : 
				base(global::RawImport_Lightspeed.Properties.Settings.Default.DMSIntegrationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationTablesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationTablesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationTablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationTablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ParentCompany> ParentCompanies
		{
			get
			{
				return this.GetTable<ParentCompany>();
			}
		}
		
		public System.Data.Linq.Table<CompanyIntegration> CompanyIntegrations
		{
			get
			{
				return this.GetTable<CompanyIntegration>();
			}
		}
		
		public System.Data.Linq.Table<DMSImport> DMSImports
		{
			get
			{
				return this.GetTable<DMSImport>();
			}
		}
		
		public System.Data.Linq.Table<DMSImportType> DMSImportTypes
		{
			get
			{
				return this.GetTable<DMSImportType>();
			}
		}
		
		public System.Data.Linq.Table<MasterDMSImport> MasterDMSImports
		{
			get
			{
				return this.GetTable<MasterDMSImport>();
			}
		}
		
		public System.Data.Linq.Table<MessageLog> MessageLogs
		{
			get
			{
				return this.GetTable<MessageLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParentCompany")]
	public partial class ParentCompany
	{
		
		private string _ID;
		
		private string _ParentCompanyName;
		
		public ParentCompany()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(7)")]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCompanyName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ParentCompanyName
		{
			get
			{
				return this._ParentCompanyName;
			}
			set
			{
				if ((this._ParentCompanyName != value))
				{
					this._ParentCompanyName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyIntegration")]
	public partial class CompanyIntegration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ParentCompanyId;
		
		private string _IntegrationType;
		
		private string _RemoteDealershipId;
		
		private bool _HasDMSReporting;
		
		private bool _HasPivotalReporting;
		
		private bool _InPivotalStaging;
		
		private EntitySet<MasterDMSImport> _MasterDMSImports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentCompanyIdChanging(string value);
    partial void OnParentCompanyIdChanged();
    partial void OnIntegrationTypeChanging(string value);
    partial void OnIntegrationTypeChanged();
    partial void OnRemoteDealershipIdChanging(string value);
    partial void OnRemoteDealershipIdChanged();
    partial void OnHasDMSReportingChanging(bool value);
    partial void OnHasDMSReportingChanged();
    partial void OnHasPivotalReportingChanging(bool value);
    partial void OnHasPivotalReportingChanged();
    partial void OnInPivotalStagingChanging(bool value);
    partial void OnInPivotalStagingChanged();
    #endregion
		
		public CompanyIntegration()
		{
			this._MasterDMSImports = new EntitySet<MasterDMSImport>(new Action<MasterDMSImport>(this.attach_MasterDMSImports), new Action<MasterDMSImport>(this.detach_MasterDMSImports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCompanyId", DbType="Char(7) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ParentCompanyId
		{
			get
			{
				return this._ParentCompanyId;
			}
			set
			{
				if ((this._ParentCompanyId != value))
				{
					this.OnParentCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCompanyId = value;
					this.SendPropertyChanged("ParentCompanyId");
					this.OnParentCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntegrationType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IntegrationType
		{
			get
			{
				return this._IntegrationType;
			}
			set
			{
				if ((this._IntegrationType != value))
				{
					this.OnIntegrationTypeChanging(value);
					this.SendPropertyChanging();
					this._IntegrationType = value;
					this.SendPropertyChanged("IntegrationType");
					this.OnIntegrationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteDealershipId", DbType="VarChar(50)")]
		public string RemoteDealershipId
		{
			get
			{
				return this._RemoteDealershipId;
			}
			set
			{
				if ((this._RemoteDealershipId != value))
				{
					this.OnRemoteDealershipIdChanging(value);
					this.SendPropertyChanging();
					this._RemoteDealershipId = value;
					this.SendPropertyChanged("RemoteDealershipId");
					this.OnRemoteDealershipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasDMSReporting", DbType="Bit NOT NULL")]
		public bool HasDMSReporting
		{
			get
			{
				return this._HasDMSReporting;
			}
			set
			{
				if ((this._HasDMSReporting != value))
				{
					this.OnHasDMSReportingChanging(value);
					this.SendPropertyChanging();
					this._HasDMSReporting = value;
					this.SendPropertyChanged("HasDMSReporting");
					this.OnHasDMSReportingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPivotalReporting", DbType="Bit NOT NULL")]
		public bool HasPivotalReporting
		{
			get
			{
				return this._HasPivotalReporting;
			}
			set
			{
				if ((this._HasPivotalReporting != value))
				{
					this.OnHasPivotalReportingChanging(value);
					this.SendPropertyChanging();
					this._HasPivotalReporting = value;
					this.SendPropertyChanged("HasPivotalReporting");
					this.OnHasPivotalReportingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InPivotalStaging", DbType="Bit NOT NULL")]
		public bool InPivotalStaging
		{
			get
			{
				return this._InPivotalStaging;
			}
			set
			{
				if ((this._InPivotalStaging != value))
				{
					this.OnInPivotalStagingChanging(value);
					this.SendPropertyChanging();
					this._InPivotalStaging = value;
					this.SendPropertyChanged("InPivotalStaging");
					this.OnInPivotalStagingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyIntegration_MasterDMSImport", Storage="_MasterDMSImports", ThisKey="ParentCompanyId", OtherKey="ParentCompanyId")]
		public EntitySet<MasterDMSImport> MasterDMSImports
		{
			get
			{
				return this._MasterDMSImports;
			}
			set
			{
				this._MasterDMSImports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MasterDMSImports(MasterDMSImport entity)
		{
			this.SendPropertyChanging();
			entity.CompanyIntegration = this;
		}
		
		private void detach_MasterDMSImports(MasterDMSImport entity)
		{
			this.SendPropertyChanging();
			entity.CompanyIntegration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DMSImport")]
	public partial class DMSImport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MasterDMSImportID;
		
		private int _TypeID;
		
		private System.Nullable<int> _ImportInterval;
		
		private System.Nullable<System.DateTime> _EarliestImportDate;
		
		private System.Nullable<System.DateTime> _NextImportDate;
		
		private System.Nullable<System.DateTime> _LastImportDate;
		
		private bool _RunImport;
		
		private EntityRef<DMSImportType> _DMSImportType;
		
		private EntityRef<MasterDMSImport> _MasterDMSImport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMasterDMSImportIDChanging(int value);
    partial void OnMasterDMSImportIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnImportIntervalChanging(System.Nullable<int> value);
    partial void OnImportIntervalChanged();
    partial void OnEarliestImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEarliestImportDateChanged();
    partial void OnNextImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextImportDateChanged();
    partial void OnLastImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastImportDateChanged();
    partial void OnRunImportChanging(bool value);
    partial void OnRunImportChanged();
    #endregion
		
		public DMSImport()
		{
			this._DMSImportType = default(EntityRef<DMSImportType>);
			this._MasterDMSImport = default(EntityRef<MasterDMSImport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterDMSImportID", DbType="Int NOT NULL")]
		public int MasterDMSImportID
		{
			get
			{
				return this._MasterDMSImportID;
			}
			set
			{
				if ((this._MasterDMSImportID != value))
				{
					if (this._MasterDMSImport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMasterDMSImportIDChanging(value);
					this.SendPropertyChanging();
					this._MasterDMSImportID = value;
					this.SendPropertyChanged("MasterDMSImportID");
					this.OnMasterDMSImportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._DMSImportType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportInterval", DbType="Int")]
		public System.Nullable<int> ImportInterval
		{
			get
			{
				return this._ImportInterval;
			}
			set
			{
				if ((this._ImportInterval != value))
				{
					this.OnImportIntervalChanging(value);
					this.SendPropertyChanging();
					this._ImportInterval = value;
					this.SendPropertyChanged("ImportInterval");
					this.OnImportIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarliestImportDate", DbType="Date")]
		public System.Nullable<System.DateTime> EarliestImportDate
		{
			get
			{
				return this._EarliestImportDate;
			}
			set
			{
				if ((this._EarliestImportDate != value))
				{
					this.OnEarliestImportDateChanging(value);
					this.SendPropertyChanging();
					this._EarliestImportDate = value;
					this.SendPropertyChanged("EarliestImportDate");
					this.OnEarliestImportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextImportDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> NextImportDate
		{
			get
			{
				return this._NextImportDate;
			}
			set
			{
				if ((this._NextImportDate != value))
				{
					this.OnNextImportDateChanging(value);
					this.SendPropertyChanging();
					this._NextImportDate = value;
					this.SendPropertyChanged("NextImportDate");
					this.OnNextImportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastImportDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastImportDate
		{
			get
			{
				return this._LastImportDate;
			}
			set
			{
				if ((this._LastImportDate != value))
				{
					this.OnLastImportDateChanging(value);
					this.SendPropertyChanging();
					this._LastImportDate = value;
					this.SendPropertyChanged("LastImportDate");
					this.OnLastImportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunImport", DbType="Bit NOT NULL")]
		public bool RunImport
		{
			get
			{
				return this._RunImport;
			}
			set
			{
				if ((this._RunImport != value))
				{
					this.OnRunImportChanging(value);
					this.SendPropertyChanging();
					this._RunImport = value;
					this.SendPropertyChanged("RunImport");
					this.OnRunImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMSImportType_DMSImport", Storage="_DMSImportType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public DMSImportType DMSImportType
		{
			get
			{
				return this._DMSImportType.Entity;
			}
			set
			{
				DMSImportType previousValue = this._DMSImportType.Entity;
				if (((previousValue != value) 
							|| (this._DMSImportType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DMSImportType.Entity = null;
						previousValue.DMSImports.Remove(this);
					}
					this._DMSImportType.Entity = value;
					if ((value != null))
					{
						value.DMSImports.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("DMSImportType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MasterDMSImport_DMSImport", Storage="_MasterDMSImport", ThisKey="MasterDMSImportID", OtherKey="ID", IsForeignKey=true)]
		public MasterDMSImport MasterDMSImport
		{
			get
			{
				return this._MasterDMSImport.Entity;
			}
			set
			{
				MasterDMSImport previousValue = this._MasterDMSImport.Entity;
				if (((previousValue != value) 
							|| (this._MasterDMSImport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MasterDMSImport.Entity = null;
						previousValue.DMSImports.Remove(this);
					}
					this._MasterDMSImport.Entity = value;
					if ((value != null))
					{
						value.DMSImports.Add(this);
						this._MasterDMSImportID = value.ID;
					}
					else
					{
						this._MasterDMSImportID = default(int);
					}
					this.SendPropertyChanged("MasterDMSImport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DMSImportType")]
	public partial class DMSImportType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DMSImport> _DMSImports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DMSImportType()
		{
			this._DMSImports = new EntitySet<DMSImport>(new Action<DMSImport>(this.attach_DMSImports), new Action<DMSImport>(this.detach_DMSImports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DMSImportType_DMSImport", Storage="_DMSImports", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<DMSImport> DMSImports
		{
			get
			{
				return this._DMSImports;
			}
			set
			{
				this._DMSImports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DMSImports(DMSImport entity)
		{
			this.SendPropertyChanging();
			entity.DMSImportType = this;
		}
		
		private void detach_DMSImports(DMSImport entity)
		{
			this.SendPropertyChanging();
			entity.DMSImportType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterDMSImport")]
	public partial class MasterDMSImport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ParentCompanyId;
		
		private System.Nullable<int> _ImportInterval;
		
		private System.Nullable<System.DateTime> _EarliestImportDate;
		
		private System.Nullable<System.DateTime> _NextImportDate;
		
		private System.Nullable<System.DateTime> _LastImportDate;
		
		private bool _RunImport;
		
		private EntitySet<DMSImport> _DMSImports;
		
		private EntityRef<CompanyIntegration> _CompanyIntegration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentCompanyIdChanging(string value);
    partial void OnParentCompanyIdChanged();
    partial void OnImportIntervalChanging(System.Nullable<int> value);
    partial void OnImportIntervalChanged();
    partial void OnEarliestImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEarliestImportDateChanged();
    partial void OnNextImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextImportDateChanged();
    partial void OnLastImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastImportDateChanged();
    partial void OnRunImportChanging(bool value);
    partial void OnRunImportChanged();
    #endregion
		
		public MasterDMSImport()
		{
			this._DMSImports = new EntitySet<DMSImport>(new Action<DMSImport>(this.attach_DMSImports), new Action<DMSImport>(this.detach_DMSImports));
			this._CompanyIntegration = default(EntityRef<CompanyIntegration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCompanyId", DbType="Char(7) NOT NULL", CanBeNull=false)]
		public string ParentCompanyId
		{
			get
			{
				return this._ParentCompanyId;
			}
			set
			{
				if ((this._ParentCompanyId != value))
				{
					if (this._CompanyIntegration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCompanyId = value;
					this.SendPropertyChanged("ParentCompanyId");
					this.OnParentCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportInterval", DbType="Int")]
		public System.Nullable<int> ImportInterval
		{
			get
			{
				return this._ImportInterval;
			}
			set
			{
				if ((this._ImportInterval != value))
				{
					this.OnImportIntervalChanging(value);
					this.SendPropertyChanging();
					this._ImportInterval = value;
					this.SendPropertyChanged("ImportInterval");
					this.OnImportIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarliestImportDate", DbType="Date")]
		public System.Nullable<System.DateTime> EarliestImportDate
		{
			get
			{
				return this._EarliestImportDate;
			}
			set
			{
				if ((this._EarliestImportDate != value))
				{
					this.OnEarliestImportDateChanging(value);
					this.SendPropertyChanging();
					this._EarliestImportDate = value;
					this.SendPropertyChanged("EarliestImportDate");
					this.OnEarliestImportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextImportDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> NextImportDate
		{
			get
			{
				return this._NextImportDate;
			}
			set
			{
				if ((this._NextImportDate != value))
				{
					this.OnNextImportDateChanging(value);
					this.SendPropertyChanging();
					this._NextImportDate = value;
					this.SendPropertyChanged("NextImportDate");
					this.OnNextImportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastImportDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastImportDate
		{
			get
			{
				return this._LastImportDate;
			}
			set
			{
				if ((this._LastImportDate != value))
				{
					this.OnLastImportDateChanging(value);
					this.SendPropertyChanging();
					this._LastImportDate = value;
					this.SendPropertyChanged("LastImportDate");
					this.OnLastImportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunImport", DbType="Bit NOT NULL")]
		public bool RunImport
		{
			get
			{
				return this._RunImport;
			}
			set
			{
				if ((this._RunImport != value))
				{
					this.OnRunImportChanging(value);
					this.SendPropertyChanging();
					this._RunImport = value;
					this.SendPropertyChanged("RunImport");
					this.OnRunImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MasterDMSImport_DMSImport", Storage="_DMSImports", ThisKey="ID", OtherKey="MasterDMSImportID")]
		public EntitySet<DMSImport> DMSImports
		{
			get
			{
				return this._DMSImports;
			}
			set
			{
				this._DMSImports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyIntegration_MasterDMSImport", Storage="_CompanyIntegration", ThisKey="ParentCompanyId", OtherKey="ParentCompanyId", IsForeignKey=true)]
		public CompanyIntegration CompanyIntegration
		{
			get
			{
				return this._CompanyIntegration.Entity;
			}
			set
			{
				CompanyIntegration previousValue = this._CompanyIntegration.Entity;
				if (((previousValue != value) 
							|| (this._CompanyIntegration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyIntegration.Entity = null;
						previousValue.MasterDMSImports.Remove(this);
					}
					this._CompanyIntegration.Entity = value;
					if ((value != null))
					{
						value.MasterDMSImports.Add(this);
						this._ParentCompanyId = value.ParentCompanyId;
					}
					else
					{
						this._ParentCompanyId = default(string);
					}
					this.SendPropertyChanged("CompanyIntegration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DMSImports(DMSImport entity)
		{
			this.SendPropertyChanging();
			entity.MasterDMSImport = this;
		}
		
		private void detach_DMSImports(DMSImport entity)
		{
			this.SendPropertyChanging();
			entity.MasterDMSImport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageLog")]
	public partial class MessageLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ParentCompanyId;
		
		private string _RequestParameter;
		
		private System.Nullable<int> _ConversationId;
		
		private string _Message;
		
		private System.DateTime _LogTime;
		
		private string _MessageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentCompanyIdChanging(string value);
    partial void OnParentCompanyIdChanged();
    partial void OnRequestParameterChanging(string value);
    partial void OnRequestParameterChanged();
    partial void OnConversationIdChanging(System.Nullable<int> value);
    partial void OnConversationIdChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnLogTimeChanging(System.DateTime value);
    partial void OnLogTimeChanged();
    partial void OnMessageTypeChanging(string value);
    partial void OnMessageTypeChanged();
    #endregion
		
		public MessageLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCompanyId", DbType="Char(7)")]
		public string ParentCompanyId
		{
			get
			{
				return this._ParentCompanyId;
			}
			set
			{
				if ((this._ParentCompanyId != value))
				{
					this.OnParentCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCompanyId = value;
					this.SendPropertyChanged("ParentCompanyId");
					this.OnParentCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestParameter", DbType="VarChar(MAX)")]
		public string RequestParameter
		{
			get
			{
				return this._RequestParameter;
			}
			set
			{
				if ((this._RequestParameter != value))
				{
					this.OnRequestParameterChanging(value);
					this.SendPropertyChanging();
					this._RequestParameter = value;
					this.SendPropertyChanged("RequestParameter");
					this.OnRequestParameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationId", DbType="Int")]
		public System.Nullable<int> ConversationId
		{
			get
			{
				return this._ConversationId;
			}
			set
			{
				if ((this._ConversationId != value))
				{
					this.OnConversationIdChanging(value);
					this.SendPropertyChanging();
					this._ConversationId = value;
					this.SendPropertyChanged("ConversationId");
					this.OnConversationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogTime
		{
			get
			{
				return this._LogTime;
			}
			set
			{
				if ((this._LogTime != value))
				{
					this.OnLogTimeChanging(value);
					this.SendPropertyChanging();
					this._LogTime = value;
					this.SendPropertyChanged("LogTime");
					this.OnLogTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageType", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string MessageType
		{
			get
			{
				return this._MessageType;
			}
			set
			{
				if ((this._MessageType != value))
				{
					this.OnMessageTypeChanging(value);
					this.SendPropertyChanging();
					this._MessageType = value;
					this.SendPropertyChanged("MessageType");
					this.OnMessageTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
